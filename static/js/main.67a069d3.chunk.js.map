{"version":3,"sources":["Components/Modal/modal.js","action/CardAction.js","Components/Card/Cards.js","Pages/Homepage/Homepage.js","reducer/CardReducer.js","App.js","serviceWorker.js","index.js"],"names":["ModalContent","props","handleChange","event","target","value","name","setState","console","log","state","title","description","this","dispatch","type","payload","closeModal","className","TextField","id","label","variant","color","onChange","Button","onClick","handleClick","React","Component","connect","useStyles","makeStyles","theme","root","maxWidth","media","height","modal","display","alignItems","justifyContent","paper","backgroundColor","palette","background","boxShadow","shadows","padding","spacing","outline","MediaCard","data","classes","useState","open","setOpen","modalClose","Card","tag","CardActionArea","CardContent","Typography","gutterBottom","component","code","CardMedia","image","controls","autoPlay","src","sound","CardActions","size","Modal","aria-labelledby","aria-describedby","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Homepage","card","axios","get","then","response","cards","catch","error","randomCard","Fab","aria-label","nextCard","Init","randomCardIndex","CardReducer","action","Math","floor","random","length","editedData","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.67a069d3.chunk.js","sourcesContent":["import React from 'react'\nimport './modal.scss'\nimport { connect } from 'react-redux'\nimport { editCard } from '../../action/CardAction'\n\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\nclass ModalContent extends React.Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n        title: '',\n        description: ''\n    }\n  }\n\n  handleChange = event => {\n    const { value, name }= event.target\n    this.setState({[name] : value })\n    console.log('SetState:::', this.state)\n  }\n\n  handleClick() {\n    this.props.dispatch(editCard(this.state))\n    console.log('edit data:::', this.state)\n    this.props.closeModal();\n  }\n\n  render () {\n    return (\n      <div className='modal-wrap'>\n        <h2 className='title'>Have your own title and description for this card</h2>\n        <TextField\n          id='Title'\n          label='Title'\n          variant='filled'\n          color='primary'\n          name='title'\n          onChange={this.handleChange}\n        />\n        <TextField\n          id='Description'\n          label='Description'\n          variant='filled'\n          color='primary'\n          name='description'\n          onChange={this.handleChange}\n        />\n        <Button\n          variant='contained' color='primary'\n        onClick={() => this.handleClick()}\n        >\n              Save\n        </Button>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) =>({\n  dispatch : dispatch\n})\n\nexport default connect(mapDispatchToProps)(ModalContent)\n","export const getData = data => ({\n  type: 'GET_DATA',\n  payload: data\n})\n\nexport const nextTry = card => ({\n  type: 'NEXT_TRY',\n  payload: card\n})\n\nexport const editCard = cardChangs => ({\n  type: 'EDIT_CARD',\n  payload: cardChangs\n})\n","import React, { useState } from 'react'\nimport './cards.scss'\n\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\n\nimport Modal from '@material-ui/core/Modal'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport Fade from '@material-ui/core/Fade'\nimport ModalContent from '../Modal/modal'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    maxWidth: 345\n  },\n  media: {\n    height: 140\n  },\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n    '&:focus': { outline: 'none' }\n  }\n}))\n\nexport default function MediaCard ({ data }) {\n  console.log('mediaCardProps', data)\n\n  const classes = useStyles()\n  const [open, setOpen] = useState(false)\n\n  const modalOpen = () => {\n    setOpen(true)\n  }\n\n  const modalClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <Card className={data.tag}>\n      <CardActionArea>\n        <CardContent>\n          <Typography gutterBottom variant='h5' component='h2'>\n            {data.title}\n          </Typography>\n          <Typography variant='body2' color='textSecondary' component='p'>\n            {data.description}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      {data.code === 0 &&\n        <CardMedia\n          className={classes.media}\n          image={data.image}\n          title='Contemplative Reptile'\n        />}\n      {data.code === 1 &&\n        <div className='animated-card' />}\n      {data.code === 2 &&\n        <audio className='audio' controls autoPlay='autoplay'>\n          <source src={data.sound} type='audio/mpeg' />\n        </audio>}\n      <CardActions>\n        <Button size='small' color='primary' onClick={modalOpen}>\n          Edit\n        </Button>\n        <Modal\n          aria-labelledby='transition-modal-title'\n          aria-describedby='transition-modal-description'\n          className={classes.modal}\n          open={open}\n          onClose={modalClose}\n          closeAfterTransition\n          BackdropComponent={Backdrop}\n          BackdropProps={{ timeout: 500 }}\n        >\n          <Fade in={open}>\n            <div className={classes.paper}>\n              <ModalContent\n                closeModal={modalClose}\n              />\n            </div>\n          </Fade>\n        </Modal>\n      </CardActions>\n    </Card>\n  )\n}\n","import React from 'react'\nimport './homepage.scss'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { getData, nextTry } from '../../action/CardAction'\n\nimport MediaCard from '../../Components/Card/Cards'\nimport Fab from '@material-ui/core/Fab'\nimport NavigateNextRoundedIcon from '@material-ui/icons/NavigateNextRounded'\n\nclass Homepage extends React.Component {\n  nextCard () {\n    this.props.dispatch(nextTry())\n  }\n\n  componentDidMount () {\n    axios.get('https://static.pushe.co/challenge/json')\n      .then((response) => {\n        console.log('res;;;', response)\n        this.props.dispatch(getData(response.data.cards))\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  render () {\n    console.log('data', this.props.data)\n    const { randomCard } = this.props\n\n    return (\n      <>\n        <div className='card-wrap'>\n          <MediaCard data={randomCard} />\n        </div>\n        <div className='fab-wrap'>\n          <Fab color='primary' aria-label='add'>\n            <NavigateNextRoundedIcon onClick={() => this.nextCard()} />\n          </Fab>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  data: state.data,\n  randomCard: state.randomCard\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatch: dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage)\n","const Init = {\n  data: [],\n  randomCard: {},\n  randomCardIndex: 0\n}\n\nconst CardReducer = (state = Init, action) => {\n  console.log('action:;;;', state, action)\n  const randomCardIndex = Math.floor(Math.random() * state.data.length)\n  const editedData = state.data\n\n  switch (action.type) {\n    case 'GET_DATA' :\n      return {\n        ...state,\n        data: action.payload,\n        randomCard: action.payload[state.randomCardIndex]\n      }\n    case 'NEXT_TRY':\n      return {\n        ...state,\n        randomCard: state.data[randomCardIndex],\n        randomCardIndex: randomCardIndex\n      }\n    case 'EDIT_CARD':\n      console.log('1randomCardIndex', state.randomCardIndex)\n      console.log('2randomCard', state.randomCard)\n      console.log('3action.payload', action.payload)\n      editedData[state.randomCardIndex] = { ...state.randomCard, ...action.payload }\n      console.log('4editedData', editedData[state.randomCardIndex])\n      return {\n        ...state,\n        randomCard: { ...state.randomCard, ...action.payload },\n        data: editedData\n      }\n    default :\n      return state\n  }\n}\n\nexport default CardReducer\n","import React from 'react'\nimport './App.css'\nimport Homepage from './Pages/Homepage/Homepage'\nimport CardReducer from './reducer/CardReducer'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nconst store = createStore(CardReducer)\n\nfunction App () {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <Homepage />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}