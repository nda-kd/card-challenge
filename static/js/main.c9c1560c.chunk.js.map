{"version":3,"sources":["Components/Cards.js","Pages/Homepage.js","action/CardAction.js","reducer/CardReducer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","media","height","MediaCard","data","classes","console","log","Card","className","CardActionArea","CardContent","Typography","gutterBottom","variant","component","title","color","description","code","CardMedia","image","controls","autoPlay","src","sound","type","CardActions","Button","size","Homepage","card","this","props","dispatch","payload","axios","get","then","response","cards","catch","error","randomCard","Fab","aria-label","onClick","nextCard","React","Component","connect","state","Init","randomCardIndex","CardReducer","action","Math","floor","random","length","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c9c1560c.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345\n  },\n  media: {\n    height: 140\n  }\n})\n\nexport default function MediaCard ({ data }) {\n  const classes = useStyles()\n  console.log('mediaCardProps', data)\n\n  return (\n    <Card className='root'>\n      <CardActionArea>\n        <CardContent>\n          <Typography gutterBottom variant='h5' component='h2'>\n            {data.title}\n          </Typography>\n          <Typography variant='body2' color='textSecondary' component='p'>\n            {data.description}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      {data.code === 0 &&\n        <CardMedia\n          className={classes.media}\n          image={data.image}\n          title='Contemplative Reptile'\n        />}\n      {data.code === 1 &&\n        <div className='animated-card' />}\n      {data.code === 2 &&\n        <audio className='audio' controls autoPlay='autoplay'>\n          <source src={data.sound} type='audio/mpeg' />\n        </audio>}\n      <CardActions>\n        <Button size='small' color='primary'>\n          Edit\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n","import React from 'react'\nimport './homepage.styles.scss'\nimport axios from 'axios'\nimport { connect } from 'react-redux'\nimport { getData, nextTry } from '../action/CardAction'\n\nimport MediaCard from '../Components/Cards'\nimport Fab from '@material-ui/core/Fab'\nimport NavigateNextRoundedIcon from '@material-ui/icons/NavigateNextRounded'\n\nclass Homepage extends React.Component {\n  nextCard () {\n    this.props.dispatch(nextTry())\n  }\n\n  componentDidMount () {\n    axios.get('https://static.pushe.co/challenge/json')\n      .then((response) => {\n        console.log('res;;;', response)\n        this.props.dispatch(getData(response.data.cards))\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }\n\n  render () {\n    console.log('data', this.props.data)\n    const { randomCard } = this.props\n\n    return (\n      <>\n        <div className='card-wrap'>\n          <MediaCard data={randomCard} />\n        </div>\n        <div className='fab-wrap'>\n          <Fab color='primary' aria-label='add'>\n            <NavigateNextRoundedIcon onClick={() => this.nextCard()} />\n          </Fab>\n        </div>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  data: state.data,\n  randomCard: state.randomCard\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  dispatch: dispatch\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage)\n","export const getData = data => ({\n  type: 'GET_DATA',\n  payload: data\n})\n\nexport const nextTry = card => ({\n  type: 'NEXT_TRY',\n  payload: card\n})\n","const Init = {\n  data: [],\n  randomCard: {},\n  randomCardIndex: 0\n}\n\nconst CardReducer = (state = Init, action) => {\n  console.log('action:;;;', state, action)\n  const randomCardIndex = Math.floor(Math.random() * state.data.length)\n\n  switch (action.type) {\n    case 'GET_DATA' :\n      return {\n        ...state,\n        data: action.payload,\n        randomCard: action.payload[state.randomCardIndex]\n      }\n    case 'NEXT_TRY':\n      return {\n        ...state,\n        randomCard: state.data[randomCardIndex],\n        randomCardIndex: randomCardIndex\n      }\n\n    default :\n      return state\n  }\n}\n\nexport default CardReducer\n","import React from 'react'\nimport './App.css'\nimport Homepage from './Pages/Homepage'\nimport CardReducer from './reducer/CardReducer'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nconst store = createStore(CardReducer)\n\nfunction App () {\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <Homepage />\n      </div>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}